"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatePlugin = exports.getAssetPaths = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const packFromManifest = require("@kintone/plugin-packer/from-manifest");
// Taken from https://github.com/kintone/plugin-packer/blob/master/src/sourcelist.js
const sourceList = (manifest) => {
    const sourceTypes = [
        ["desktop", "js"],
        ["desktop", "css"],
        ["mobile", "js"],
        ["mobile", "css"],
        ["config", "js"],
        ["config", "css"],
    ];
    const list = sourceTypes
        // @ts-ignore
        .map((t) => manifest[t[0]] && manifest[t[0]][t[1]])
        .filter((i) => !!i)
        .reduce((a, b) => a.concat(b), [])
        .filter((file) => !/^https?:\/\//.test(file));
    if (manifest.config && manifest.config.html) {
        list.push(manifest.config.html);
    }
    list.push("manifest.json", manifest.icon);
    return list;
};
/**
 * Get asset file paths from the manifest.json
 * @param manifestJSONPath
 */
const getAssetPaths = (manifestJSONPath) => {
    const manifest = JSON.parse(fs_1.default.readFileSync(manifestJSONPath, "utf-8"));
    return sourceList(manifest).map((file) => path_1.default.resolve(path_1.default.dirname(manifestJSONPath), file));
};
exports.getAssetPaths = getAssetPaths;
/**
 * Generate a plugin zip
 * @param manifestJSONPath
 * @param pluginZipPath
 * @param privateKey
 */
const generatePlugin = (manifestJSONPath, privateKey) => {
    return packFromManifest(manifestJSONPath, privateKey).then((output) => ({ id: output.id, buffer: output.plugin }));
};
exports.generatePlugin = generatePlugin;
//# sourceMappingURL=plugin.js.map