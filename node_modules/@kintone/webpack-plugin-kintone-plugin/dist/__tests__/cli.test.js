"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const helpers_1 = require("./helpers");
const pluginDir = path_1.default.resolve(__dirname, "fixtures", "sample");
const pluginZipPath = path_1.default.resolve(pluginDir, "dist", "plugin.zip");
const pluginJsOutputPaths = [
    path_1.default.resolve(pluginDir, "plugin", "js", "desktop.js"),
    path_1.default.resolve(pluginDir, "plugin", "js", "mobile.js"),
    path_1.default.resolve(pluginDir, "plugin", "js", "config.js"),
];
const runWebpack = (config = "webpack.config.js") => {
    const webpackCommand = `webpack${os_1.default.platform() === "win32" ? ".cmd" : ""}`;
    return (0, child_process_1.spawnSync)(webpackCommand, ["--config", config, "--mode", "production"], {
        cwd: pluginDir,
    });
};
describe("KintonePlugin", () => {
    afterAll(() => {
        // Cleanup the zip
        [pluginZipPath, ...pluginJsOutputPaths].forEach((generatedFilePath) => {
            try {
                fs_1.default.unlinkSync(generatedFilePath);
            }
            catch (e) {
                // noop
            }
        });
    });
    it("should be able to create a plugin zip", () => {
        const rs = runWebpack();
        expect(rs.error).toBeUndefined();
        (0, helpers_1.verifyPluginZip)(pluginZipPath);
    });
});
//# sourceMappingURL=cli.test.js.map