"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const rimraf_1 = __importDefault(require("rimraf"));
const webpack_1 = __importDefault(require("webpack"));
const helpers_1 = require("./helpers");
const index_1 = __importDefault(require("../index"));
const chokidar_1 = __importDefault(require("chokidar"));
const watchOptions = os_1.default.platform() === "win32"
    ? {
        awaitWriteFinish: {
            stabilityThreshold: 1000,
            pollInterval: 250,
        },
    }
    : {};
const pluginDir = path_1.default.resolve(__dirname, "fixtures", "sample");
const pluginJSPaths = [
    path_1.default.resolve(pluginDir, "plugin", "js", "desktop.js"),
    path_1.default.resolve(pluginDir, "plugin", "js", "mobile.js"),
    path_1.default.resolve(pluginDir, "plugin", "js", "config.js"),
];
const tempDir = fs_1.default.mkdtempSync(path_1.default.join(os_1.default.tmpdir(), "kintone-webpack-plugin-kintone-plugin-watch-"));
const pluginZipPath = path_1.default.resolve(tempDir, "watch", "plugin.zip");
fs_1.default.mkdirSync(path_1.default.dirname(pluginZipPath), { recursive: true });
const webpackConfig = {
    mode: "development",
    entry: {
        desktop: path_1.default.resolve(tempDir, "src", "desktop.js"),
        mobile: path_1.default.resolve(tempDir, "src", "mobile.js"),
        config: path_1.default.resolve(tempDir, "src", "config.js"),
    },
    output: {
        path: path_1.default.resolve(pluginDir, "plugin", "js"),
        filename: "[name].js",
    },
    plugins: [
        new index_1.default({
            manifestJSONPath: path_1.default.resolve(pluginDir, "plugin", "manifest.json"),
            privateKeyPath: path_1.default.resolve(pluginDir, "private.ppk"),
            pluginZipPath,
        }),
    ],
};
describe("KintonePlugin", () => {
    let compiler;
    beforeEach(() => {
        // copy src files to temp directory
        fs_1.default.mkdirSync(path_1.default.join(tempDir, "src"), { recursive: true });
        ["desktop.js", "mobile.js", "config.js"].forEach((filename) => {
            fs_1.default.copyFileSync(path_1.default.resolve(pluginDir, "src", filename), path_1.default.resolve(tempDir, "src", filename));
        });
    });
    afterAll(() => {
        rimraf_1.default.sync(tempDir);
    });
    afterEach(() => {
        // delete generated js files and plugin.zip
        [pluginZipPath, ...pluginJSPaths].forEach((generatedFilePath) => {
            try {
                fs_1.default.unlinkSync(generatedFilePath);
            }
            catch (e) {
                // noop
            }
        });
    });
    it("should be able to create a plugin zip when watch mode started (fix #1299)", (done) => {
        const pluginZipWatcher = chokidar_1.default.watch(path_1.default.dirname(pluginZipPath), watchOptions);
        const callback = (filepath) => {
            watching.suspend();
            expect(filepath).toBe(pluginZipPath);
            (0, helpers_1.verifyPluginZip)(pluginZipPath);
            watching.close(() => pluginZipWatcher.close().finally(() => done()));
        };
        pluginZipWatcher
            .on("add", (filepath) => {
            try {
                callback(filepath);
            }
            catch (e) {
                done(e);
            }
        })
            .on("error", (err) => done(err));
        compiler = (0, webpack_1.default)(webpackConfig);
        const watching = compiler.watch({}, (err) => {
            if (err) {
                done(err);
            }
            // noop
        });
    });
    it("should not create plugin zip more than once for single webpack compilation when watch mode", (done) => {
        let countFileChanged = 0;
        let countPluginZipGenerated = 0;
        const pluginZipWatcher = chokidar_1.default.watch(path_1.default.dirname(pluginZipPath), watchOptions);
        const callback = (filepath) => {
            // watching.suspend();
            expect(filepath).toBe(pluginZipPath);
            (0, helpers_1.verifyPluginZip)(pluginZipPath);
            countPluginZipGenerated++;
            console.log(`countPluginZipGenerated: ${countPluginZipGenerated}`);
            expect(countPluginZipGenerated).toBe(countFileChanged + 1);
            if (countFileChanged > 2) {
                watching.close(() => pluginZipWatcher.close().finally(() => done()));
            }
            // watching.resume();
            console.log("make file change.");
            countFileChanged++;
            fs_1.default.writeFileSync(path_1.default.resolve(tempDir, "src", "desktop.js"), `const count = ${countFileChanged};`);
            console.log(`countFileChanged: ${countFileChanged}`);
        };
        pluginZipWatcher
            .on("add", (filepath) => {
            console.log(`File ${filepath} has been added`);
            try {
                callback(filepath);
            }
            catch (e) {
                done(e);
            }
        })
            .on("change", (filepath) => {
            console.log(`File ${filepath} has been changed`);
            try {
                callback(filepath);
            }
            catch (e) {
                done(e);
            }
        })
            .on("error", (err) => done(err))
            .on("ready", () => console.log("Initial scan complete. Ready for changes"));
        compiler = (0, webpack_1.default)(webpackConfig);
        const watching = compiler.watch({}, (err) => {
            if (err) {
                done(err);
            }
            // noop
        });
    });
});
//# sourceMappingURL=watch.test.js.map